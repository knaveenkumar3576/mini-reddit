{"version":3,"sources":["components/SubReddits/index.js","components/PostDetail/index.js","components/TogglePostType/index.js","components/SubRedditPosts/index.js","components/SearchBar/index.js","components/RedditHome/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","button","isActive","SubReddits","selectedSubReddit","handleSubRedditSelect","searchSubReddit","useState","subReddits","setSubReddits","useEffect","url","Axios","get","then","result","data","children","map","listing","name","display_name","display_name_prefixed","subRedditItems","subReddit","key","value","onClick","StyledPost","div","StyledPreview","img","StyledTitle","StyledPostContent","p","StyledPostAuthor","PostDetail","post","imageURL","endsWith","postContent","selftext","src","title","author","TogglePostType","handleToggle","selectedToggle","type","checked","onChange","for","SubRedditPostList","table","TableRow","tr","rowColor","PostHeader","Container","SubRedditPosts","posts","setPosts","selectedPost","setSelectedPost","selectedPostType","setPostType","postItems","index","SearchBar","handleSearch","searchRef","React","createRef","onSubmit","e","preventDefault","ref","element","RedditHome","setselectedSubReddit","setSearchSubReddit","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfc63c80.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport styled from 'styled-components';\r\nimport Axios from 'axios';\r\n\r\nconst StyledButton = styled.button`\r\n  &&& {\r\n        background-color: ${({ isActive }) => (isActive ? `black` : `blue`)};\r\n        color: white;\r\n        :hover { \r\n            background-color: #ccc;\r\n        }\r\n    }\r\n`;\r\n\r\nconst SubReddits = ({\r\n    selectedSubReddit,\r\n    handleSubRedditSelect,\r\n    searchSubReddit\r\n}) => {\r\n    let [subReddits, setSubReddits] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let url = \"\";\r\n        \r\n        if(searchSubReddit === \"\") {\r\n            url = `https://www.reddit.com/subreddits/popular.json?raw_json=1`\r\n        } else {\r\n            url = `https://www.reddit.com/subreddits/search.json?q=${searchSubReddit}&raw_json=1`\r\n        }\r\n\r\n        Axios.get(url).then(result => {\r\n            let subReddits = result.data.data.children.map((listing) => {\r\n                return {\r\n                    name : listing.data.display_name,\r\n                    url : listing.data.display_name_prefixed\r\n                }\r\n            })\r\n            setSubReddits(subReddits)\r\n            handleSubRedditSelect(subReddits[0].url)\r\n        })\r\n    }, [searchSubReddit])\r\n\r\n    let subRedditItems = subReddits.map((subReddit) => {\r\n        return (\r\n            <StyledButton    \r\n                key={subReddit.name} \r\n                isActive= {selectedSubReddit === subReddit.url}\r\n                value={subReddit.name} \r\n                onClick={() => handleSubRedditSelect(subReddit.url)}\r\n            >\r\n                {subReddit.name} \r\n            </StyledButton> \r\n        )\r\n    })\r\n    \r\n    return (\r\n        <>\r\n        {subRedditItems}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default SubReddits;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst StyledPost= styled.div`\r\n  &&& {\r\n        box-sizing: border-box;\r\n        padding: 20px;\r\n        width: 50%;\r\n        height: 80vh;\r\n        display:block; \r\n        overflow: scroll;\r\n    }\r\n`;\r\n\r\nconst StyledPreview= styled.img`\r\n  &&& {\r\n        display: block;\r\n        height: 200px;\r\n        width: 200px;\r\n        margin: 0 auto;\r\n    }\r\n`;\r\n\r\nconst StyledTitle= styled.div`\r\n  &&& {\r\n    font-size: 20px;\r\n    text-align: center;\r\n}\r\n`;\r\n\r\nconst StyledPostContent= styled.p`\r\n  &&& {\r\n    font-size: 15px;\r\n    text-align: left;\r\n    border: 1px solid;\r\n    padding: 5px;\r\n}\r\n`;\r\n\r\nconst StyledPostAuthor= styled.div`\r\n  &&& {\r\n        text-align: left;\r\n        font-size: 20px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst PostDetail = ({post}) => {\r\n    let imageURL = post.url.endsWith(\".jpg\") ? post.url : \"https://dummyimage.com/300x300&text=No+image+preview!\" ;\r\n    let postContent = post.selftext === \"\" ? \"No content available\" : post.selftext;\r\n    return (\r\n        <>\r\n            <StyledPost>\r\n                <StyledPreview src={imageURL}></StyledPreview>\r\n                <StyledTitle>{post.title}</StyledTitle>\r\n                <StyledPostAuthor> {\"Author: \" + post.author} </StyledPostAuthor>\r\n                <StyledPostContent>{postContent}</StyledPostContent>\r\n            </StyledPost>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostDetail;","import React from 'react'\r\n\r\n\r\nconst TogglePostType = ({\r\n    handleToggle,\r\n    selectedToggle\r\n}) => {\r\n    return (\r\n        <div>\r\n            <input type=\"radio\" name=\"postsType\" checked={selectedToggle === 'hot'} onChange={() => handleToggle(\"hot\")} />\r\n            <label for=\"hot\">Hot</label>\r\n            <input type=\"radio\" name=\"postsType\" checked={selectedToggle === 'new'} onChange={() => handleToggle(\"new\")} />\r\n            <label for=\"new\">New</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TogglePostType;","import React, {useEffect, useState} from 'react'\r\nimport styled from 'styled-components';\r\nimport PostDetail from '../PostDetail'\r\nimport TogglePostType from '../TogglePostType'\r\nimport Axios from 'axios';\r\n\r\nconst SubRedditPostList = styled.table`\r\n  &&& {\r\n        width: 50%;\r\n        display:block; \r\n        overflow: scroll;\r\n        td:hover { \r\n            background-color: #ccc;\r\n        }\r\n        tr {\r\n            height : 30px;\r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nconst TableRow = styled.tr`\r\n&&& {\r\n    background-color: ${({ rowColor }) => (rowColor ? `white` : `lightblue`)};\r\n    border: 1px solid;\r\n}\r\n`;\r\n\r\nconst PostHeader = styled.div`\r\n&&& {\r\n    width: 100%;\r\n    background-color: black;\r\n    color: white;\r\n    margin-top: 10px;\r\n}\r\n`;\r\n\r\nconst Container = styled.div`\r\n  &&& {\r\n        margin: 20px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        text-align: center;\r\n        height: 80vh;\r\n    }\r\n`;\r\n\r\nconst SubRedditPosts = ({subReddit}) => {\r\n    let [posts, setPosts] = useState([]);\r\n    let [selectedPost, setSelectedPost] = useState(-1);\r\n    let [selectedPostType, setPostType] = useState(\"hot\");\r\n\r\n    useEffect(() => {\r\n        Axios.get(`https://www.reddit.com/${subReddit}/${selectedPostType}.json?raw_json=1`).then(result => {\r\n            let posts = result.data.data.children.map((listing) => {\r\n                return listing.data\r\n            })\r\n            setPosts(posts);\r\n            setSelectedPost(-1);\r\n        })\r\n    }, [subReddit, selectedPostType])\r\n\r\n    let postItems = posts.map((post, index) => {\r\n        return (\r\n            <TableRow key={index} rowColor={index%2 === 0} onClick={() => setSelectedPost(index)}>\r\n                <td> {post.title} </td>\r\n            </TableRow>\r\n        )\r\n    })\r\n    \r\n    return (\r\n        <>\r\n            <PostHeader> Post under subreddit {subReddit} </PostHeader>\r\n            \r\n            <TogglePostType \r\n                handleToggle={setPostType}\r\n                selectedToggle={selectedPostType}\r\n            /> \r\n            \r\n            <Container>\r\n                    <SubRedditPostList>\r\n                        <tbody>\r\n                            {postItems}\r\n                        </tbody>\r\n                    </SubRedditPostList>\r\n                {selectedPost !== -1 && <PostDetail post={posts[selectedPost]}/>}\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default SubRedditPosts;","import React from 'react'\r\n\r\nconst SearchBar = ({handleSearch}) => {\r\n\r\n    let searchRef = React.createRef();\r\n    \r\n    return (\r\n        <form onSubmit={(e) => {\r\n            e.preventDefault();\r\n            handleSearch(searchRef.value)\r\n        }}>\r\n\r\n        <input type='text' ref={(element) => searchRef=element} />\r\n        <input type='submit' value='Search' />\r\n        \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React, {useState} from 'react';\r\nimport SubReddits from '../SubReddits'\r\nimport SubRedditPosts from '../SubRedditPosts'\r\nimport SearchBar from '../SearchBar';\r\n\r\nconst RedditHome = () => {    \r\n    let [selectedSubReddit, setselectedSubReddit] = useState(\"\");\r\n    let [searchSubReddit, setSearchSubReddit] = useState(\"\");\r\n\r\n    return (\r\n    <>\r\n        <h1> Mini Reddit </h1>\r\n\r\n        <SearchBar\r\n            handleSearch={setSearchSubReddit}\r\n        />\r\n\r\n        <SubReddits \r\n            selectedSubReddit={selectedSubReddit}\r\n            handleSubRedditSelect={setselectedSubReddit}\r\n            searchSubReddit={searchSubReddit}\r\n        />\r\n\r\n        <SubRedditPosts \r\n            subReddit={selectedSubReddit}\r\n        />\r\n\r\n    </>)\r\n }\r\n\r\n export default RedditHome;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport RedditHome from './components/RedditHome';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RedditHome/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}